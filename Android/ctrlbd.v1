/*******************************************************************
psu control board firmware
05/14	
********************************************************************/
#include "system.c"
#include <pwm.c>
#include <adc.c>
#include <delay.c>
#include <timers.c>

#define PWMFREQ 7812 //Fpwm = Fosc/2^rbits <=> 8Mhz/2^10 = 7812Hz

enum {
	WRITE_DATA_H,
	READ_DATA_H,
	WRITE_DATA_L,
	READ_DATA_L,
	IDLE
};

enum{
	mADC1 = 0,
	mADC2,
	mADC3,
	mPWM1,
	mPWM2,
	mGPI,
	mGPO,
	mID
};
	
struct dataPack{
	char datal;
	char datah;	
	char status;
}i2cTransfer;

void (*doTask)(int *);

//---------------------------------------------------
//TODO: handle errors
//permitir leitura de todos os perifericos
//---------------------------------------------------
void interrupt handler(void){
	
	if(SSPIF){		
		if(!DA){
			if(RW){				
				SSPBUF = i2cTransfer.datah;
				SSPCON |= SCL_ENABLE;
				i2cTransfer.status = READ_DATA_L;
			}else{
				i2cTransfer.status = SSPBUF; // clear BF
				i2cTransfer.status = WRITE_DATA_H;
			}
		}else{			
			switch(i2cTransfer.status){
				case WRITE_DATA_H:						
						i2cTransfer.datah = SSPBUF;
						i2cTransfer.status = WRITE_DATA_L;
						break;
						
				case WRITE_DATA_L:
					i2cTransfer.datal = SSPBUF;
					switch(i2cTransfer.datah>>2){
						case mADC1:	doTask = getAdc; break;
						case mPWM1:	doTask = setPwm1; break;
						case mPWM2:	doTask = setPwm2; break;
						case mGPI: 	doTask = getGpi; break;
						case mGPO:	doTask = setGpo; break;						
					}					
					i2cTransfer.status = IDLE;
					doTask((int*)&i2cTransfer.datal);
					break;
						 
				case READ_DATA_L:
					SSPBUF = i2cTransfer.datal;
					SSPCON |= SCL_ENABLE;
					i2cTransfer.status = IDLE;
					break;		
				default:
					i2cTransfer.status = IDLE;
			}
		}
		if(WCOL || SSPOV){
			WCOL = 0;
			SSPOV = 0;			
			i2cTransfer.status = SSPBUF; // clear BF
			i2cTransfer.status = IDLE;		
		}			  
		SSPIF = 0;	
	}
	if(CCP1IF && i2cTransfer.status == IDLE){
		doTask((int*)&i2cTransfer.datal);	
		CCP1IF = 0;
	} 	 
}
//---------------------------------------------------
//
//---------------------------------------------------
void main(void)
{
    char a;
	systemInit();
	i2cSetup();  
	i2cTransfer.status = IDLE;
	setFpwm(PWMFREQ);
	CCPR1L = 0;
	CCP1CON = CCP_PWM;
	setTimer1(10000); // 10ms
	doTask = getAdc;	  	
	startTimer1;
	
	while(1){
		
	}	
}

        
