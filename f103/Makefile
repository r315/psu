##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [2.27.0] date: [Sat Nov 17 23:27:28 WET 2018] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = psu_v3


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# source path

APP_SRC_DIR :=$(CURDIR)/../psu_v3
ifeq ($(shell uname -s), Linux)
REPOSITORY = $(HOME)/STM32Cube/Repository/STM32Cube_FW_F1_V1.6.1/
else
REPOSITORY :=C:/Users/hmr/STM32Cube/Repository/STM32Cube_FW_F1_V1.6.1/
endif

SOURCES_PATH =  \
Src \
startup \
$(REPOSITORY)Drivers/CMSIS \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src \
$(REPOSITORY)Middlewares/ST/STM32_USB_Device_Library/Core/Src/ \
$(REPOSITORY)Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/ \
$(LIBEMB_PATH)/button \
$(LIBEMB_PATH)/misc \
$(LIBEMB_PATH)/console \
$(LIBEMB_PATH)/display \
$(APP_SRC_DIR) \

# firmware library path
PERIFLIB_PATH = 

# Build path
BUILD_DIR :=../build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Src/main.c \
Src/usbd_desc.c \
Src/usbd_conf.c \
Src/usb_device.c \
Src/stm32f1xx_it.c \
Src/i2c.c \
Src/gpio.c \
Src/usbd_cdc_if.c \
Src/adc.c \
Src/tim.c \
Src/system_stm32f1xx.c \
Src/stm32f1xx_hal_msp.c \
Src/vcom.c \
$(APP_SRC_DIR)/text.c \
$(APP_SRC_DIR)/psu_font.c \
$(LIBEMB_PATH)/display/font.c \
$(APP_SRC_DIR)/ssd1306.c \
$(APP_SRC_DIR)/adc_psuv3.c \
$(APP_SRC_DIR)/pwm_psuv3.c \
$(LIBEMB_PATH)/button/button.c \
$(LIBEMB_PATH)/misc/strfunc.c \
$(LIBEMB_PATH)/misc/fifo.c \
$(REPOSITORY)Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c \
$(REPOSITORY)Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_core.c \
$(REPOSITORY)Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c \
$(REPOSITORY)Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim_ex.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc_ex.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_i2c.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pcd_ex.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_usb.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio_ex.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pcd.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c \
$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc_ex.c \

CPP_SOURCES = \
$(APP_SRC_DIR)/psu_main.cpp \
$(LIBEMB_PATH)/console/console.cpp \
$(APP_SRC_DIR)/cmdadc.cpp \
$(APP_SRC_DIR)/cmdpwm.cpp \
$(APP_SRC_DIR)/cmddfu.cpp \

# ASM sources
ASM_SOURCES =  \
startup/startup_stm32f103xb.s


######################################
# firmware library
######################################
PERIFLIB_SOURCES = 


#######################################
# binaries
#######################################
BINPATH = 
PREFIX = arm-none-eabi-
CC = $(BINPATH)$(PREFIX)gcc
CPP = $(BINPATH)$(PREFIX)g++
AS = $(BINPATH)$(PREFIX)gcc -x assembler-with-cpp
CP = $(BINPATH)$(PREFIX)objcopy
AR = $(BINPATH)$(PREFIX)ar
SZ = $(BINPATH)$(PREFIX)size
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F103xB


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IInc \
-ISrc \
-I$(APP_SRC_DIR) \
-I"$(LIBEMB_PATH)"/include \
-I$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Inc \
-I$(REPOSITORY)Drivers/STM32F1xx_HAL_Driver/Inc/Legacy \
-I$(REPOSITORY)Middlewares/ST/STM32_USB_Device_Library/Core/Inc \
-I$(REPOSITORY)Drivers/CMSIS/Device/ST/STM32F1xx/Include \
-I$(REPOSITORY)Drivers/CMSIS/Include \
-I$(REPOSITORY)Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -nostdlib -lgcc

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
#CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
#LDSCRIPT = startup/STM32F103C8Tx_FLASH.ld
LDSCRIPT =startup/f103c8tx_dfu.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).bin #$(BUILD_DIR)/$(TARGET).hex
#@echo $(OBJECTS)

$(TARGET).cfg:
	@echo "Creating opencod configuration file"
	echo "interface jlink" >> $@
	echo "transport select swd" >> $@
	echo "source [find target/stm32f1x.cfg]" >> $@
	echo "adapter_khz 4000" >> $@

#use winusb driver
program: $(BUILD_DIR)/$(TARGET).elf $(TARGET).cfg
	openocd -f $(TARGET).cfg -c "program $(BUILD_DIR)/$(TARGET).bin 0x08001000 verify reset exit"

upload: $(BUILD_DIR)/$(TARGET).bin
	dfu-util -a 0 -s 0x08001000 -D $< -R

test:
	@echo $(CURDIR)
	@echo ""; $(foreach d, $(VPATH), echo $(d);)
#@echo $(C_SOURCES)
#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
#vpath %.c $(sort $(dir $(C_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.obj)))
#vpath %.cpp $(sort $(dir $(CPP_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
#vpath %.s $(sort $(dir $(ASM_SOURCES)))

VPATH +=$(SOURCES_PATH)

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	@echo "Compiling  " $<
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.obj: %.cpp Makefile | $(BUILD_DIR)
	@echo "Compiling  " $<
	@$(CPP) -c $(CFLAGS)  -fno-exceptions -fno-unwind-tables -fno-rtti -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@echo "Assembling " $<
	@$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) #Makefile
	@echo "--- Linking ---"
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@echo "--- Size ---"
	$(SZ) -A -x $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir -p $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR .dep $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
#-include $(shell mkdir .dep 2>/dev/null) $(wildcard .dep/*)

# *** EOF ***
